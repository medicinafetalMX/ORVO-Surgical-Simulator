//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/XRGenericController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRGenericController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRGenericController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRGenericController"",
    ""maps"": [
        {
            ""name"": ""RightHand"",
            ""id"": ""fc2f06f1-4bd2-4f0e-a772-e1c5c7d1bdd3"",
            ""actions"": [
                {
                    ""name"": ""Grip"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2c5d9b5a-f350-4fc0-9db9-e264d529dab2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""PassThrough"",
                    ""id"": ""78994cc2-b60c-4853-913d-1e615b2423d8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51f83172-3881-4e7c-9f78-3051bbe3c255"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbdb08f9-1f09-49a4-91c7-2a4f57bf30dc"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHand"",
            ""id"": ""ac0d1746-d80b-4f91-8d92-423c36fce4a7"",
            ""actions"": [
                {
                    ""name"": ""Grip"",
                    ""type"": ""PassThrough"",
                    ""id"": ""89211054-7367-4a32-a960-5433d47295a1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""PassThrough"",
                    ""id"": ""62999675-1b2b-4088-a02f-1921f0dc9c42"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f95b671-27a1-4023-b208-ef561bf07c23"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99752a8e-0e2b-4088-9079-1aff332185cd"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_Grip = m_RightHand.FindAction("Grip", throwIfNotFound: true);
        m_RightHand_Trigger = m_RightHand.FindAction("Trigger", throwIfNotFound: true);
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_Grip = m_LeftHand.FindAction("Grip", throwIfNotFound: true);
        m_LeftHand_Trigger = m_LeftHand.FindAction("Trigger", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RightHand
    private readonly InputActionMap m_RightHand;
    private IRightHandActions m_RightHandActionsCallbackInterface;
    private readonly InputAction m_RightHand_Grip;
    private readonly InputAction m_RightHand_Trigger;
    public struct RightHandActions
    {
        private @XRGenericController m_Wrapper;
        public RightHandActions(@XRGenericController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grip => m_Wrapper.m_RightHand_Grip;
        public InputAction @Trigger => m_Wrapper.m_RightHand_Trigger;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void SetCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterface != null)
            {
                @Grip.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGrip;
                @Grip.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGrip;
                @Grip.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGrip;
                @Trigger.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTrigger;
            }
            m_Wrapper.m_RightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Grip.started += instance.OnGrip;
                @Grip.performed += instance.OnGrip;
                @Grip.canceled += instance.OnGrip;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
            }
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private ILeftHandActions m_LeftHandActionsCallbackInterface;
    private readonly InputAction m_LeftHand_Grip;
    private readonly InputAction m_LeftHand_Trigger;
    public struct LeftHandActions
    {
        private @XRGenericController m_Wrapper;
        public LeftHandActions(@XRGenericController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grip => m_Wrapper.m_LeftHand_Grip;
        public InputAction @Trigger => m_Wrapper.m_LeftHand_Trigger;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterface != null)
            {
                @Grip.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGrip;
                @Grip.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGrip;
                @Grip.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGrip;
                @Trigger.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTrigger;
            }
            m_Wrapper.m_LeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Grip.started += instance.OnGrip;
                @Grip.performed += instance.OnGrip;
                @Grip.canceled += instance.OnGrip;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
            }
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);
    public interface IRightHandActions
    {
        void OnGrip(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
    }
    public interface ILeftHandActions
    {
        void OnGrip(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
    }
}
